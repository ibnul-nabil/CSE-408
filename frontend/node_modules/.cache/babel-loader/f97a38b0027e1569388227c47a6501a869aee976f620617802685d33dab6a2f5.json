{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSE_408\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const logout = useCallback(async () => {\n    const token = localStorage.getItem('token');\n\n    // Call backend logout endpoint\n    if (token) {\n      try {\n        await fetch('http://localhost:8080/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n      } catch (error) {\n        console.error('Logout error:', error);\n      }\n    }\n    setUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }, []);\n  const validateSession = useCallback(async token => {\n    try {\n      console.log('Validating session with token:', token);\n      const response = await fetch('http://localhost:8080/api/auth/validate', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Session validation response status:', response.status);\n      if (response.ok) {\n        const userData = await response.json();\n        console.log('Session validation successful:', userData);\n        return userData;\n      } else {\n        // Session is invalid or expired\n        console.log('Session validation failed - logging out');\n        return null;\n      }\n    } catch (error) {\n      console.error('Session validation error:', error);\n      // Return null for network errors - let the calling code decide what to do\n      return null;\n    }\n  }, []);\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // Check if user is logged in on app start\n        const storedUser = localStorage.getItem('user');\n        const token = localStorage.getItem('token');\n        console.log('Initializing auth - storedUser:', !!storedUser, 'token:', !!token);\n        if (storedUser && token) {\n          // Try to validate the session with the backend\n          const userData = await validateSession(token);\n          if (userData) {\n            console.log('Setting user from session validation');\n            setUser(userData);\n          } else {\n            // Session validation failed - check if it's a network error\n            try {\n              // Try a simple network test\n              await fetch('http://localhost:8080/api/auth/validate', {\n                method: 'HEAD',\n                headers: {\n                  'Authorization': `Bearer ${token}`\n                }\n              });\n              // If we get here, it's not a network error, so session is truly invalid\n              console.log('Session validation failed - clearing storage');\n              localStorage.removeItem('user');\n              localStorage.removeItem('token');\n              setUser(null);\n            } catch (networkError) {\n              // Network error - use stored user data as fallback\n              console.log('Network error during validation - using stored user data');\n              setUser(JSON.parse(storedUser));\n            }\n          }\n        } else {\n          console.log('No stored user or token found');\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error during auth initialization:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, [validateSession]);\n  const login = (userData, token) => {\n    console.log('Login successful - setting user and token');\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n    localStorage.setItem('token', token);\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"bwwAtcgZiorAWM3gLp2+GcDVvX8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","logout","token","localStorage","getItem","fetch","method","headers","error","console","removeItem","validateSession","log","response","status","ok","userData","json","initializeAuth","storedUser","networkError","JSON","parse","login","setItem","stringify","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CSE_408/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const logout = useCallback(async () => {\r\n    const token = localStorage.getItem('token');\r\n    \r\n    // Call backend logout endpoint\r\n    if (token) {\r\n      try {\r\n        await fetch('http://localhost:8080/api/auth/logout', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json',\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error('Logout error:', error);\r\n      }\r\n    }\r\n    \r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  }, []);\r\n\r\n  const validateSession = useCallback(async (token) => {\r\n    try {\r\n      console.log('Validating session with token:', token);\r\n      const response = await fetch('http://localhost:8080/api/auth/validate', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      console.log('Session validation response status:', response.status);\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        console.log('Session validation successful:', userData);\r\n        return userData;\r\n      } else {\r\n        // Session is invalid or expired\r\n        console.log('Session validation failed - logging out');\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Session validation error:', error);\r\n      // Return null for network errors - let the calling code decide what to do\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        // Check if user is logged in on app start\r\n        const storedUser = localStorage.getItem('user');\r\n        const token = localStorage.getItem('token');\r\n        \r\n        console.log('Initializing auth - storedUser:', !!storedUser, 'token:', !!token);\r\n        \r\n        if (storedUser && token) {\r\n          // Try to validate the session with the backend\r\n          const userData = await validateSession(token);\r\n          \r\n          if (userData) {\r\n            console.log('Setting user from session validation');\r\n            setUser(userData);\r\n          } else {\r\n            // Session validation failed - check if it's a network error\r\n            try {\r\n              // Try a simple network test\r\n              await fetch('http://localhost:8080/api/auth/validate', {\r\n                method: 'HEAD',\r\n                headers: {\r\n                  'Authorization': `Bearer ${token}`,\r\n                },\r\n              });\r\n              // If we get here, it's not a network error, so session is truly invalid\r\n              console.log('Session validation failed - clearing storage');\r\n              localStorage.removeItem('user');\r\n              localStorage.removeItem('token');\r\n              setUser(null);\r\n            } catch (networkError) {\r\n              // Network error - use stored user data as fallback\r\n              console.log('Network error during validation - using stored user data');\r\n              setUser(JSON.parse(storedUser));\r\n            }\r\n          }\r\n        } else {\r\n          console.log('No stored user or token found');\r\n          setUser(null);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during auth initialization:', error);\r\n        setUser(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, [validateSession]);\r\n\r\n  const login = (userData, token) => {\r\n    console.log('Login successful - setting user and token');\r\n    setUser(userData);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    localStorage.setItem('token', token);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}